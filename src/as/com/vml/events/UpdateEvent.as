package com.vml.events{	import flash.events.Event;	/**	 *  This class is only necessary because flash.events.DataEvent 	 *  doesn't except objects other than Strings. Not feeling creative	 *  about naming today.	 * */	public class UpdateEvent extends Event	{		protected var _data:Object;		public static const SELECT:String		 = "com.vml.events.UpdateEvent.select";		public static const DATA_LOADED:String 	 = "com.vml.events.UpdateEvent.dataLoaded";		public static const DATA_SAVED:String  	 = "com.vml.events.UpdateEvent.dataSaved";		public static const DATA_CHANGED:String  = "com.vml.events.UpdateEvent.dataChanged";		public static const EXTERNAL_CALL:String = "com.vml.events.UpdateEvent.externalCall";		public static const REQUEST_ERROR:String = "com.vml.events.UpdateEvent.dataError";		public function UpdateEvent(type:String, bubbles:Boolean = false, cancelable:Boolean = false, data:Object = null){			super(type, bubbles, cancelable);			if(data) {				_data = data;			}		}				public function set data(data:Object):void {			_data = data;		}					public function get data():Object {			return _data;		}				override public function clone():Event {			var d:Object = new Object();			for(var p:String in _data) {				d[p] = _data[p];			}			return new UpdateEvent(type, bubbles, cancelable, _data);		}	}}