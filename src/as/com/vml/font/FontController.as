package com.vml.font{	import __AS3__.vec.Vector;		import com.vml.font.VMLFont;		import flash.system.ApplicationDomain;	import flash.text.Font;	import flash.utils.getDefinitionByName;		public class FontController	{		private static var _instance:FontController;		private var _fonts:Vector.<VMLFont>;				public function FontController( key:Key )		{			_fonts = new Vector.<VMLFont>();		}				public function init( xml:XMLList ):void		{			var fontRef:Class			var child:XML;			var font:VMLFont;			for each( child in xml.children() )			{				if( !checkFontRegistered( child.@classname ) )				{					fontRef = getDefinitionByName( child.@classname ) as Class;					Font.registerFont( fontRef );					font = new fontRef() as VMLFont;					font.id = child.@classname;					_fonts.push( font );				}			}		}				private function checkFontRegistered( id:String ):Boolean		{			var font:VMLFont;			var exists:Boolean = false;			for each( font in _fonts )			{				if( font.id == id )				{					exists = true;				}			}			return exists;		}				public function get fonts():Vector.<VMLFont>		{			return _fonts;		}						public function getFontById( id:String ):VMLFont		{			var font:VMLFont;			var selected:VMLFont;						for each( font in _fonts )			{				if( font.id == id )				{					selected = font;				}			}			return selected;		}						public static function getInstance():FontController		{			if( !_instance )			{				_instance = new FontController( new Key() );			}			return _instance;		}							}}final internal class Key{}