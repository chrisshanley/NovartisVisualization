package  com.vml.video{		import com.vml.events.VideoEvent;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.NetStatusEvent;	import flash.events.TimerEvent;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.utils.Timer;		[Event(name="videoBuffering", type="com.vml.events.media.VideoEvent")]	[Event(name="videoBufferFull", type="com.vml.events.media.VideoEvent")]	[Event(name="videoDownloadPercent", type="com.vml.events.media.VideoEvent")]	[Event(name="videoComplete", type="com.vml.events.media.VideoEvent")]	[Event(name="videoTime", type="com.vml.events.media.VideoEvent")]	[Event(name="videoTime", type="com.vml.events.media.VideoEvent")]		[Event(name="videoStart", type="com.vml.events.media.VideoEvent")]		public class FLVPlayer extends MovieClip {						protected var stream:NetStream;		protected var con:NetConnection;		protected var meta:Object;			protected var st:SoundTransform;		protected var path:String;				protected var video:Video;		protected var duration:Number;			protected var timer:Timer;				private var _isPlaying:Boolean;		private var _percentLoaded:Number = 0;				public function FLVPlayer(w:Number = 320, h:Number = 240){			st = new SoundTransform();			timer = new Timer(1000);			video = new Video(w, h);			addChild(video);		}				public function init():void {						con = new NetConnection();			con.addEventListener(NetStatusEvent.NET_STATUS, handleNetStatus)			con.connect( null );						stream = new NetStream(con);						stream.bufferTime = 5;			stream.soundTransform = st;						initMetaData()			addEvents();			this.dispatchEvent( new VideoEvent(VideoEvent.VIDEO_CONNECTION_READY));		}				protected function initMetaData( ):void {			meta = new Object();			meta.onMetaData = handleMetaData;			stream.client = meta;		}				public function playVideo( src:String = null ):void{			if( stream ) closeStream();						path = ( !src ) ? path : src;					stream.play(path);			video.attachNetStream( stream );			timer.start();			_isPlaying = true;		}				public function addEvents():void {			timer.addEventListener(TimerEvent.TIMER, handleTime);			this.addEventListener(Event.ENTER_FRAME, handleDownloadProgress);		}				public function removeEvents():void {			timer.removeEventListener( TimerEvent.TIMER, handleTime )			this.removeEventListener(Event.ENTER_FRAME, handleDownloadProgress);		}				public function pauseVideo():void {			stream.pause();			_isPlaying = false;		}				public function resumeVideo():void {			stream.resume();			_isPlaying = true;		}				public function get isPlaying():Boolean		{			return _isPlaying;		}				public function seek(percentage:Number):void {			var seek_time:Number = Math.floor(percentage * duration);			try 			{				stream.seek( seek_time );			} 			catch( e:Error )			{						}		}				public function get percent():Number		{			return ( time / duration );		}				public function mute():void {			this.st.volume = 0;			this.stream.soundTransform = st;			}				public function unMute():void {			this.st.volume = 1;			this.stream.soundTransform = st;		}				public function get isMuted():Boolean {			return this.st.volume == 0;		}				protected function handleMetaData( info:Object ):void {			this.duration = info.duration;			resize(info.width, info.height)		}				protected function handleNetStatus(event:NetStatusEvent):void {			for(var prop:String in event.info){				switch(event.info[prop]){					case "NetConnection.Connect.Success" :						this.dispatchEvent( new VideoEvent(VideoEvent.VIDEO_START));					break;					case "NetStream.Buffer.Empty" :						this.dispatchEvent( new VideoEvent(VideoEvent.VIDEO_BUFFERING));					break;					case "NetStream.Buffer.Full" :						this.dispatchEvent( new VideoEvent(VideoEvent.VIDEO_BUFFER_FULL));					break;				}			}		}				protected function handleDownloadProgress( event:Event ):void {			var percent:Number = Math.round( (stream.bytesLoaded/stream.bytesTotal) * 100 );									this.dispatchEvent( new VideoEvent(VideoEvent.VIDEO_DOWNLOAD_PERCENT,false, {percent:percent}));									if( Math.round(percent) == 100 ){				this.removeEventListener(Event.ENTER_FRAME, handleDownloadProgress);				}			_percentLoaded = percent;		}				public function get percentLoaded():Number		{			return _percentLoaded;				}				public function set volume( value:Number ):void		{			this.st.volume = value;			this.stream.soundTransform = st;		}				protected function handleTime(event:TimerEvent ):void {			if( !isNaN( this.duration ) ){				var seconds:Number = Math.round( stream.time%60 );				var minutes:Number = Math.floor( stream.time/60 );							var sec:String = ( seconds.toString().length == 1 ) ? "0"+ seconds.toString() : seconds.toString();				var time:String = minutes.toString() + ":"+sec;								this.dispatchEvent( new  VideoEvent(VideoEvent.VIDEO_TIME, false,{time:stream.time, dur:duration, clock:time}))							if( Math.round( stream.time) == Math.round( duration )){									this.dispatchEvent( new VideoEvent( VideoEvent.VIDEO_COMPLETE ));									timer.stop();									timer.removeEventListener( TimerEvent.TIMER, handleTime );								}			}		}				public function restart():void		{			addEvents();			timer.start();		}				public function closeStream():void {						stream.close();			video.clear();		}				public function get time():Number {			return stream.time;		}				public function get dur():Number {			return duration;		}				protected function resize( w:Number, h:Number ):void 		{		}				public function destroy():void {			this.removeEvents();			this.stream.close();			this.con.close();			this.video.clear();			this.removeChild( video );						this.video = null;			this.con = null;			this.stream = null;					}		}}